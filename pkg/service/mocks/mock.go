// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	opencast_recorder "github.com/zanzhit/opencast_recorder"
)

// MockCamera is a mock of Camera interface.
type MockCamera struct {
	ctrl     *gomock.Controller
	recorder *MockCameraMockRecorder
}

// MockCameraMockRecorder is the mock recorder for MockCamera.
type MockCameraMockRecorder struct {
	mock *MockCamera
}

// NewMockCamera creates a new mock instance.
func NewMockCamera(ctrl *gomock.Controller) *MockCamera {
	mock := &MockCamera{ctrl: ctrl}
	mock.recorder = &MockCameraMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCamera) EXPECT() *MockCameraMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCamera) Create(camera opencast_recorder.Camera) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", camera)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCameraMockRecorder) Create(camera interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCamera)(nil).Create), camera)
}

// MockRecording is a mock of Recording interface.
type MockRecording struct {
	ctrl     *gomock.Controller
	recorder *MockRecordingMockRecorder
}

// MockRecordingMockRecorder is the mock recorder for MockRecording.
type MockRecordingMockRecorder struct {
	mock *MockRecording
}

// NewMockRecording creates a new mock instance.
func NewMockRecording(ctrl *gomock.Controller) *MockRecording {
	mock := &MockRecording{ctrl: ctrl}
	mock.recorder = &MockRecordingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecording) EXPECT() *MockRecordingMockRecorder {
	return m.recorder
}

// Move mocks base method.
func (m *MockRecording) Move(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockRecordingMockRecorder) Move(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockRecording)(nil).Move), arg0)
}

// Schedule mocks base method.
func (m *MockRecording) Schedule(rec opencast_recorder.RecordingSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", rec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockRecordingMockRecorder) Schedule(rec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockRecording)(nil).Schedule), rec)
}

// Start mocks base method.
func (m *MockRecording) Start(rec []opencast_recorder.Recording) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", rec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRecordingMockRecorder) Start(rec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRecording)(nil).Start), rec)
}

// Stats mocks base method.
func (m *MockRecording) Stats(arg0 string) (opencast_recorder.Recording, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", arg0)
	ret0, _ := ret[0].(opencast_recorder.Recording)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockRecordingMockRecorder) Stats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockRecording)(nil).Stats), arg0)
}

// Stop mocks base method.
func (m *MockRecording) Stop(cameraIP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", cameraIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRecordingMockRecorder) Stop(cameraIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRecording)(nil).Stop), cameraIP)
}
